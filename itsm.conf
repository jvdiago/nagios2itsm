# BMC 
# itsm.pl will look here by default: /etc/nagios/itsm/itsm.cfg

# Log File configuration
$itsm_log_file = '/etc/nagios/itsm/itsm_log4perl.conf';

# Uniform Resource Identifier used in the Web Services Call
$itsm_uri = 'https://itsm/arsys/services';
# ITSM web services URL
# i.e. http://srvrdemo/ITSMWebServices/CreateIncident.asmx?op=CreateIncident
# if no operation is defined, nagios2itsm will call an operation with the same name as the "asmx" page
# ---
$itsm_url = 'https://itsm/arsys/services/ARService?server=itsmtest&webService=HPD_Cust_IncidentInterface_Create_WS';
$itsm_url_method = 'HelpDesk_Submit_Service';

$itsm_url_queryList = 'https://itsm/arsys/services/ARService?server=itsmtest&webService=HPD_Cust_IncidentInterface_WS';
$itsm_url_queryList_method = 'HelpDesk_QueryList_Service';

$itsm_url_query = 'https://itsm/arsys/services/ARService?server=itsmtest&webService=HPD_Cust_IncidentInterface_WS';
$itsm_url_query_method = 'HelpDesk_Query_Service';

$itsm_url_recovery = 'https://itsm/arsys/services/ARService?server=itsmtest&webService=HPD_Cust_IncidentInterface_WS';
$itsm_url_recovery_method = 'HelpDesk_Modify_Service';

# Web Services Response TIMEOUT
$itsm_timeout = 30;
$itsm_max_days = 30;

# ITSM Authentication
$itsm_ws_security = 'yes';
$itsm_ws_login = '';
$itsm_ws_password = '';

# ITSM  default creation params
my $itsm_default_company = '';
my $itsm_default_firstName = '';
my $itsm_default_lastName = '';
my $itsm_default_source = 'Other';
my $itsm_default_serviceType = 'User Service Restoration';

# ITSM default priority levels
$itsm_default_service_impact = '3-Moderate/Limited';
$itsm_default_service_urgency = '3-Medium';
$itsm_default_host_impact = '3-Moderate/Limited';
$itsm_default_host_urgency = '2-High';

# ITSM Work Note parameters
$itsm_default_worknote_source = 'Other';
$itsm_default_worknote_locked = 'yes';
$itsm_default_worknote_access = 'Internal';
$itsm_default_worknote_type = 'General Information';
$itsm_default_worknote_summary = 'Created By Nagios';

#ITSM event behaviour
$send_mail_on_Recovery = 'yes';
$send_mail_on_worknote = 'yes';
$reopen_on_notification = 'yes';

# Nagios Parameters
# -----------------

# Max retry in case of failure
$ng_max_retry = '3';
# Retry interval in seconds
$ng_wait_retry = '30';

# Mail notification will be used in case of failure.
$mailer = '/usr/sbin/sendmail -t';
$ng_email_contact_to = 'nagios';
$ng_email_contact_from = 'nagios';

# Send notification to Nagios contact in case of failure.
# This <options> field is a logical OR of the following integer values that affect aspects of the notification that are sent out:
#	-1 = No Notification,
#	 0 = No option (default),
#	 1 = Broadcast (send notification to all normal and all escalated contacts for the service),
#	 2 = Forced (notification is sent out regardless of current time, whether or not notifications are enabled, etc.),
#	 4 = Increment current notification # for the service(this is not done by default for custom notifications). 
$ng_cust_notification = -1;

# This automatically generated file will contain an UUID that will identify the server in ITSM
$ng_srv_uuid_file = '/etc/nagios/itsm/ng_srv.uuid';

# The nagios command pipe
# Leave blank to desactivate nagios integration
$ng_pipe = '/var/spool/nagios/cmd/nagios.cmd'; 

# Nagios contact use by ITSM for COMMENT, ACKNOWLEDGE and NOTIFICATION
$ng_contact = 'Supervisor';

# Custom Macro '_DISABLE_ACK' can be use to disable ACKs per host or service
$ng_set_acknowledge_on_ticket_creation = 'yes';

# Nagios Server FQDN & IP Address should be retrieve automatically. Use those parameters to overwrite them.
# $ngsrv_fqdn = '';
# $ngsrv_addr = '';

# Instead of using a _fqdn custom Macro, Hostnames or Alias can me used as fqdn (nagios v2)
$ng_use_hostname_as_fqdn = 'no';
$ng_use_alias_as_fqdn = 'no';

# Alternately, when using an event buffer in ITSM to store Nagios Event instead
# of creating directly incident, Recovery message can be sent as regular event to ITSM.
$send_Recovery_as_normal_event = 'no';

# Use to disable event filtering during nagios downtime
$ignore_event_on_downtime = 'yes';

# Based on the $NOTIFICATIONTYPE$ nagios macro, some notification can be disabled using the <@filter_notification> array
# Nagios notification type can be:
#	- "PROBLEM"
#	- "RECOVERY"
#	- "ACKNOWLEDGEMENT"
#	- "FLAPPINGSTART"
#	- "FLAPPINGSTOP"
#	- "FLAPPINGDISABLED"
#	- "DOWNTIMESTART"
#	- "DOWNTIMEEND"
#	- "DOWNTIMECANCELLED"
# ----------------------------------------------------------------------------------------
# "ACKNOWLEDGEMENT" anyway will be disabled if <ng_set_acknowledge_on_ticket_creation=yes>
# ----------------------------------------------------------------------------------------
@filter_notification = ("ACKNOWLEDGEMENT","FLAPPINGSTART","FLAPPINGSTOP","FLAPPINGDISABLED","DOWNTIMESTART","DOWNTIMESTART","DOWNTIMEEND","DOWNTIMECANCELLED");

